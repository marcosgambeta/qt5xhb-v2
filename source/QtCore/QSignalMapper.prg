//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QOBJECT
#endif

CLASS QSignalMapper INHERIT QObject

   METHOD new
   METHOD delete
   METHOD setMapping
   METHOD removeMappings
   METHOD mapping
   METHOD map

   METHOD onMapped1
   METHOD onMapped2
   METHOD onMapped3
   METHOD onMapped4
   METHOD onMappedInt
   METHOD onMappedObject
   METHOD onMappedString
   METHOD onMappedWidget

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QSignalMapper
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtCore/QSignalMapper>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#include <QtCore/QSignalMapper>
#endif

#include <QtWidgets/QWidget>

    /*
    QSignalMapper(QObject * parent = nullptr)
    */
HB_FUNC_STATIC(QSIGNALMAPPER_NEW)
{
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    auto obj = new QSignalMapper(OPQOBJECT(1, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QSIGNALMAPPER_DELETE)
{
  auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  if (obj != nullptr) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = nullptr;
    auto ptr = hb_itemPutPtr(nullptr, nullptr);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QSIGNALMAPPER_SETMAPPING)
{
  if (ISNUMPAR(2) && ISQOBJECT(1) && HB_ISNUM(2))
  {
    /*
    void setMapping(QObject * sender, int id)
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->setMapping(PQOBJECT(1), PINT(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(2) && ISQOBJECT(1) && HB_ISCHAR(2))
  {
    /*
    void setMapping(QObject * sender, const QString &text)
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->setMapping(PQOBJECT(1), PQSTRING(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(2) && ISQOBJECT(1) && ISQWIDGET(2))
  {
    /*
    void setMapping(QObject * sender, QWidget * widget)
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->setMapping(PQOBJECT(1), PQWIDGET(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(2) && ISQOBJECT(1) && ISQOBJECT(2))
  {
    /*
    void setMapping(QObject * sender, QObject * object)
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->setMapping(PQOBJECT(1), PQOBJECT(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void removeMappings(QObject * sender)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_REMOVEMAPPINGS)
{
  auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQOBJECT(1))
    {
#endif
      obj->removeMappings(PQOBJECT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QSIGNALMAPPER_MAPPING)
{
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    QObject * mapping(int id) const
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      auto ptr = obj->mapping(PINT(1));
      Qt5xHb::createReturnQObjectClass(ptr, "QOBJECT");
    }
  }
  else if (ISNUMPAR(1) && HB_ISCHAR(1))
  {
    /*
    QObject * mapping(const QString &text) const
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      auto ptr = obj->mapping(PQSTRING(1));
      Qt5xHb::createReturnQObjectClass(ptr, "QOBJECT");
    }
  }
  else if (ISNUMPAR(1) && ISQWIDGET(1))
  {
    /*
    QObject * mapping(QWidget * widget) const
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      auto ptr = obj->mapping(PQWIDGET(1));
      Qt5xHb::createReturnQObjectClass(ptr, "QOBJECT");
    }
  }
  else if (ISNUMPAR(1) && ISQOBJECT(1))
  {
    /*
    QObject * mapping(QObject * object) const
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      auto ptr = obj->mapping(PQOBJECT(1));
      Qt5xHb::createReturnQObjectClass(ptr, "QOBJECT");
    }
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QSIGNALMAPPER_MAP)
{
  if (ISNUMPAR(0))
  {
    /*
    void map()
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->map();
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && ISQOBJECT(1))
  {
    /*
    void map(QObject * sender)
    */
    auto obj = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

    if (obj != nullptr) {
      obj->map(PQOBJECT(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void mapped(int arg)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPED1)
{
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mapped(int)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection =
            QObject::connect(sender, QOverload<int>::of(&QSignalMapper::mapped), [sender, indexOfCodeBlock](int arg1) {
              auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

              if (cb != nullptr)
              {
                auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                auto pArg1 = hb_itemPutNI(nullptr, arg1);
                hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                hb_itemRelease(pSender);
                hb_itemRelease(pArg1);
              }
            });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
}

/*
void mapped(const QString &arg)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPED2)
{
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mapped(QString)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection = QObject::connect(sender, QOverload<const QString &>::of(&QSignalMapper::mapped),
                                           [sender, indexOfCodeBlock](const QString &arg1) {
                                             auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

                                             if (cb != nullptr)
                                             {
                                               auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                                               auto pArg1 = hb_itemPutC(nullptr, QSTRINGTOSTRING(arg1));
                                               hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                                               hb_itemRelease(pSender);
                                               hb_itemRelease(pArg1);
                                             }
                                           });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
}

/*
void mapped(QWidget * arg)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPED3)
{
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mapped(QWidget*)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection = QObject::connect(sender, QOverload<QWidget *>::of(&QSignalMapper::mapped),
                                           [sender, indexOfCodeBlock](QWidget *arg1) {
                                             auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

                                             if (cb != nullptr)
                                             {
                                               auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                                               auto pArg1 = Qt5xHb::Signals_return_qobject(arg1, "QWIDGET");
                                               hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                                               hb_itemRelease(pSender);
                                               hb_itemRelease(pArg1);
                                             }
                                           });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
}

/*
void mapped(QObject * arg)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPED4)
{
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mapped(QObject*)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection = QObject::connect(sender, QOverload<QObject *>::of(&QSignalMapper::mapped),
                                           [sender, indexOfCodeBlock](QObject *arg1) {
                                             auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

                                             if (cb != nullptr)
                                             {
                                               auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                                               auto pArg1 = Qt5xHb::Signals_return_qobject(arg1, "QOBJECT");
                                               hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                                               hb_itemRelease(pSender);
                                               hb_itemRelease(pArg1);
                                             }
                                           });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
}

/*
void mappedInt(int i)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPEDINT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mappedInt(int)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection = QObject::connect(sender, &QSignalMapper::mappedInt, [sender, indexOfCodeBlock](int arg1) {
          auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

          if (cb != nullptr)
          {
            auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
            auto pArg1 = hb_itemPutNI(nullptr, arg1);
            hb_vmEvalBlockV(cb, 2, pSender, pArg1);
            hb_itemRelease(pSender);
            hb_itemRelease(pArg1);
          }
        });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
#else
  hb_retl(false);
#endif
}

/*
void mappedObject(QObject * object)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPEDOBJECT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mappedObject(QObject*)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection =
            QObject::connect(sender, &QSignalMapper::mappedObject, [sender, indexOfCodeBlock](QObject *arg1) {
              auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

              if (cb != nullptr)
              {
                auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                auto pArg1 = Qt5xHb::Signals_return_qobject(arg1, "QOBJECT");
                hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                hb_itemRelease(pSender);
                hb_itemRelease(pArg1);
              }
            });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
#else
  hb_retl(false);
#endif
}

/*
void mappedString(const QString &text)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPEDSTRING)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mappedString(QString)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection =
            QObject::connect(sender, &QSignalMapper::mappedString, [sender, indexOfCodeBlock](const QString &arg1) {
              auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

              if (cb != nullptr)
              {
                auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                auto pArg1 = hb_itemPutC(nullptr, QSTRINGTOSTRING(arg1));
                hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                hb_itemRelease(pSender);
                hb_itemRelease(pArg1);
              }
            });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
#else
  hb_retl(false);
#endif
}

/*
void mappedWidget(QWidget * widget)
*/
HB_FUNC_STATIC(QSIGNALMAPPER_ONMAPPEDWIDGET)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
  auto sender = qobject_cast<QSignalMapper *>(Qt5xHb::getQObjectPointerFromSelfItem());

  auto result = false;

  if (sender != nullptr)
  {
    auto indexOfSignal = sender->metaObject()->indexOfSignal("mappedWidget(QWidget*)");
    auto indexOfCodeBlock = -1;

    if (ISNUMPAR(1) && (HB_ISBLOCK(1) || HB_ISSYMBOL(1)))
    {
      if (Qt5xHb::Signals_connection(sender, indexOfSignal, indexOfCodeBlock))
      {
        auto connection =
            QObject::connect(sender, &QSignalMapper::mappedWidget, [sender, indexOfCodeBlock](QWidget *arg1) {
              auto cb = Qt5xHb::Signals_return_codeblock(indexOfCodeBlock);

              if (cb != nullptr)
              {
                auto pSender = Qt5xHb::Signals_return_qobject(sender, "QSIGNALMAPPER");
                auto pArg1 = Qt5xHb::Signals_return_qobject(arg1, "QWIDGET");
                hb_vmEvalBlockV(cb, 2, pSender, pArg1);
                hb_itemRelease(pSender);
                hb_itemRelease(pArg1);
              }
            });

        Qt5xHb::Signals_store_connection(indexOfCodeBlock, connection);
        result = true;
      }
    }
    else if (ISNUMPAR(0))
    {
      Qt5xHb::Signals_disconnection(sender, indexOfSignal);
      QObject::disconnect(Qt5xHb::Signals_get_connection(sender, indexOfSignal));
      result = true;
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_retl(result);
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
