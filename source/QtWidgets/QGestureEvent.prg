//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QGESTURE
REQUEST QPOINTF
REQUEST QWIDGET
#endif

CLASS QGestureEvent INHERIT QEvent

   METHOD new
   METHOD delete
   METHOD accept
   METHOD activeGestures
   METHOD canceledGestures
   METHOD gesture
   METHOD gestures
   METHOD ignore
   METHOD isAccepted
   METHOD mapToGraphicsScene
   METHOD setAccepted
   METHOD widget

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QGestureEvent
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtWidgets/QGestureEvent>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#include <QtWidgets/QGestureEvent>
#endif

    /*
    QGestureEvent(const QList<QGesture*> &gestures)
    */
HB_FUNC_STATIC(QGESTUREEVENT_NEW)
{
  if (ISNUMPAR(1) && HB_ISARRAY(1))
  {
    QList<QGesture *> par1;
    auto aList1 = hb_param(1, HB_IT_ARRAY);
    int nLen1 = hb_arrayLen(aList1);
    for (auto i1 = 0; i1 < nLen1; i1++)
    {
      par1 << static_cast<QGesture *>(hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList1, i1 + 1), "POINTER", 0)));
    }
    auto obj = new QGestureEvent(par1);
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QGESTUREEVENT_DELETE)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
    delete obj;
    obj = nullptr;
    auto ptr = hb_itemPutPtr(nullptr, nullptr);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QGESTUREEVENT_ACCEPT)
{
  if (ISNUMPAR(0)) {
    /*
    void accept()
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->accept();
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && ISQGESTURE(1))
  {
    /*
    void accept(QGesture * gesture)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->accept(PQGESTURE(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    void accept(Qt::GestureType gestureType)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->accept(static_cast<Qt::GestureType>(hb_parni(1)));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QList<QGesture*> activeGestures() const
*/
HB_FUNC_STATIC(QGESTUREEVENT_ACTIVEGESTURES)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto list = obj->activeGestures();
      auto pDynSym = hb_dynsymFindName("QGESTURE");
      auto pArray = hb_itemArrayNew(0);
      if (pDynSym != nullptr)
      {
        for (auto item : list)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          auto pObject = hb_itemNew(nullptr);
          hb_itemCopy(pObject, hb_stackReturnItem());
          auto pItem = hb_itemPutPtr(nullptr, item);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, nullptr, "QGESTURE", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QList<QGesture*> canceledGestures() const
*/
HB_FUNC_STATIC(QGESTUREEVENT_CANCELEDGESTURES)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto list = obj->canceledGestures();
      auto pDynSym = hb_dynsymFindName("QGESTURE");
      auto pArray = hb_itemArrayNew(0);
      if (pDynSym != nullptr)
      {
        for (auto item : list)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          auto pObject = hb_itemNew(nullptr);
          hb_itemCopy(pObject, hb_stackReturnItem());
          auto pItem = hb_itemPutPtr(nullptr, item);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, nullptr, "QGESTURE", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QGesture * gesture(Qt::GestureType type) const
*/
HB_FUNC_STATIC(QGESTUREEVENT_GESTURE)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      auto ptr = obj->gesture(static_cast<Qt::GestureType>(hb_parni(1)));
      Qt5xHb::createReturnQObjectClass(ptr, "QGESTURE");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QList<QGesture*> gestures() const
*/
HB_FUNC_STATIC(QGESTUREEVENT_GESTURES)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto list = obj->gestures();
      auto pDynSym = hb_dynsymFindName("QGESTURE");
      auto pArray = hb_itemArrayNew(0);
      if (pDynSym != nullptr)
      {
        for (auto item : list)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          auto pObject = hb_itemNew(nullptr);
          hb_itemCopy(pObject, hb_stackReturnItem());
          auto pItem = hb_itemPutPtr(nullptr, item);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, nullptr, "QGESTURE", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QGESTUREEVENT_IGNORE)
{
  if (ISNUMPAR(0)) {
    /*
    void ignore()
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->ignore();
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && ISQGESTURE(1))
  {
    /*
    void ignore(QGesture * gesture)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->ignore(PQGESTURE(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    void ignore(Qt::GestureType gestureType)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->ignore(static_cast<Qt::GestureType>(hb_parni(1)));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QGESTUREEVENT_ISACCEPTED)
{
  if (ISNUMPAR(0)) {
    /*
    bool isAccepted() const
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      RBOOL(obj->isAccepted());
    }
  }
  else if (ISNUMPAR(1) && ISQGESTURE(1))
  {
    /*
    bool isAccepted(QGesture * gesture) const
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      RBOOL(obj->isAccepted(PQGESTURE(1)));
    }
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    bool isAccepted(Qt::GestureType gestureType) const
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      RBOOL(obj->isAccepted(static_cast<Qt::GestureType>(hb_parni(1))));
    }
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QPointF mapToGraphicsScene(const QPointF &gesturePoint) const
*/
HB_FUNC_STATIC(QGESTUREEVENT_MAPTOGRAPHICSSCENE)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOINTF(1))
    {
#endif
      auto ptr = new QPointF(obj->mapToGraphicsScene(*PQPOINTF(1)));
      Qt5xHb::createReturnClass(ptr, "QPOINTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QGESTUREEVENT_SETACCEPTED)
{
  if (ISNUMPAR(1) && HB_ISLOG(1))
  {
    /*
    void setAccepted(bool accepted)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->setAccepted(PBOOL(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(2) && ISQGESTURE(1) && HB_ISLOG(2))
  {
    /*
    void setAccepted(QGesture * gesture, bool value)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->setAccepted(PQGESTURE(1), PBOOL(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISLOG(2))
  {
    /*
    void setAccepted(Qt::GestureType gestureType, bool value)
    */
    auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr) {
      obj->setAccepted(static_cast<Qt::GestureType>(hb_parni(1)), PBOOL(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QWidget * widget() const
*/
HB_FUNC_STATIC(QGESTUREEVENT_WIDGET)
{
  auto obj = static_cast<QGestureEvent *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto ptr = obj->widget();
      Qt5xHb::createReturnQWidgetClass(ptr, "QWIDGET");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

#pragma ENDDUMP
