//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QCOLOR
REQUEST QMATRIX
REQUEST QPOINT
REQUEST QRECT
REQUEST QSIZE
REQUEST QTRANSFORM
#endif

CLASS QImage INHERIT QPaintDevice

   METHOD new
   METHOD delete
   METHOD allGray
   METHOD bitPlaneCount
   METHOD byteCount
   METHOD bytesPerLine
   METHOD cacheKey
   METHOD color
   METHOD colorCount
   METHOD colorTable
   METHOD convertToFormat
   METHOD copy
   METHOD createAlphaMask
   METHOD createHeuristicMask
   METHOD createMaskFromColor
   METHOD depth
   METHOD dotsPerMeterX
   METHOD dotsPerMeterY
   METHOD fill
   METHOD format
   METHOD hasAlphaChannel
   METHOD height
   METHOD invertPixels
   METHOD isGrayscale
   METHOD isNull
   METHOD load
   METHOD loadFromData
   METHOD mirrored
   METHOD offset
   METHOD pixel
   METHOD pixelIndex
   METHOD rect
   METHOD rgbSwapped
   METHOD save
   METHOD scaled
   METHOD scaledToHeight
   METHOD scaledToWidth
   METHOD scanLine
   METHOD setColor
   METHOD setColorCount
   METHOD setDotsPerMeterX
   METHOD setDotsPerMeterY
   METHOD setOffset
   METHOD setPixel
   METHOD setText
   METHOD size
   METHOD swap
   METHOD text
   METHOD textKeys
   METHOD transformed
   METHOD valid
   METHOD width
   METHOD fromData
   METHOD trueMatrix
   METHOD pixelColor
   METHOD reinterpretAsFormat
   METHOD setPixelColor
   METHOD convertTo
   METHOD toVariant
   METHOD fromVariant

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QImage
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtGui/QImage>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#include <QtGui/QImage>
#endif

#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtGui/QColor>

HB_FUNC_STATIC(QIMAGE_NEW)
{
  if (ISNUMPAR(0))
  {
    /*
    QImage()
    */
    auto obj = new QImage();
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(2) && ISQSIZE(1) && HB_ISNUM(2))
  {
    /*
    QImage(const QSize &size, QImage::Format format)
    */
    auto obj = new QImage(*PQSIZE(1), static_cast<QImage::Format>(hb_parni(2)));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3))
  {
    /*
    QImage(int width, int height, QImage::Format format)
    */
    auto obj = new QImage(PINT(1), PINT(2), static_cast<QImage::Format>(hb_parni(3)));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISBETWEEN(1, 2) && HB_ISCHAR(1) && ISCHARORNIL(2))
  {
    /*
    QImage(const QString &fileName, const char * format = nullptr)
    */
    auto obj = new QImage(PQSTRING(1), OPCONSTCHAR(2, nullptr));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(1) && ISQIMAGE(1))
  {
    /*
    QImage(const QImage &image)
    */
    auto obj = new QImage(*PQIMAGE(1));
    Qt5xHb::returnNewObject(obj, true);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_DELETE)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
    delete obj;
    obj = nullptr;
    auto ptr = hb_itemPutPtr(nullptr, nullptr);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool allGray() const
*/
HB_FUNC_STATIC(QIMAGE_ALLGRAY)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->allGray());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int bitPlaneCount() const
*/
HB_FUNC_STATIC(QIMAGE_BITPLANECOUNT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->bitPlaneCount());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int byteCount() const
*/
HB_FUNC_STATIC(QIMAGE_BYTECOUNT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->byteCount());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int bytesPerLine() const
*/
HB_FUNC_STATIC(QIMAGE_BYTESPERLINE)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->bytesPerLine());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qint64 cacheKey() const
*/
HB_FUNC_STATIC(QIMAGE_CACHEKEY)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->cacheKey());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QRgb color(int i) const
*/
HB_FUNC_STATIC(QIMAGE_COLOR)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RQRGB(obj->color(PINT(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int colorCount() const
*/
HB_FUNC_STATIC(QIMAGE_COLORCOUNT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->colorCount());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QVector<QRgb> colorTable() const
*/
HB_FUNC_STATIC(QIMAGE_COLORTABLE)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto list = obj->colorTable();
      auto pArray = hb_itemArrayNew(0);
      for (const auto &item : list)
      {
        auto pItem = hb_itemPutNI(nullptr, item);
        hb_arrayAddForward(pArray, pItem);
        hb_itemRelease(pItem);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_CONVERTTOFORMAT)
{
  if (ISBETWEEN(1, 2) && HB_ISNUM(1) && ISNUMORNIL(2))
  {
    /*
    QImage convertToFormat(QImage::Format format, Qt::ImageConversionFlags flags = Qt::AutoColor) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(obj->convertToFormat(static_cast<QImage::Format>(hb_parni(1)),
                                                 HB_ISNIL(2) ? static_cast<Qt::ImageConversionFlags>(Qt::AutoColor)
                                                             : static_cast<Qt::ImageConversionFlags>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else if (ISBETWEEN(2, 3) && HB_ISNUM(1) && HB_ISARRAY(2) && ISNUMORNIL(3))
  {
    /*
    QImage convertToFormat(QImage::Format format, const QVector<QRgb> &colorTable, Qt::ImageConversionFlags flags =
    Qt::AutoColor) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      QVector<QRgb> par2;
      auto aList2 = hb_param(2, HB_IT_ARRAY);
      int nLen2 = hb_arrayLen(aList2);
      QRgb temp2;
      for (auto i2 = 0; i2 < nLen2; i2++)
      {
        temp2 = (QRgb)hb_arrayGetNI(aList2, i2 + 1);
        par2 << temp2;
      }
      auto ptr = new QImage(obj->convertToFormat(static_cast<QImage::Format>(hb_parni(1)), par2,
                                                 HB_ISNIL(3) ? static_cast<Qt::ImageConversionFlags>(Qt::AutoColor)
                                                             : static_cast<Qt::ImageConversionFlags>(hb_parni(3))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_COPY)
{
  if (ISBETWEEN(0, 1) && (ISQRECT(1) || HB_ISNIL(1)))
  {
    /*
    QImage copy(const QRect &rectangle = QRect()) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(obj->copy(HB_ISNIL(1) ? QRect() : *static_cast<QRect *>(Qt5xHb::itemGetPtr(1))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
  {
    /*
    QImage copy(int x, int y, int width, int height) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(obj->copy(PINT(1), PINT(2), PINT(3), PINT(4)));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QImage createAlphaMask(Qt::ImageConversionFlags flags = Qt::AutoColor) const
*/
HB_FUNC_STATIC(QIMAGE_CREATEALPHAMASK)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISNUMORNIL(1))
    {
#endif
      auto ptr = new QImage(obj->createAlphaMask(HB_ISNIL(1) ? static_cast<Qt::ImageConversionFlags>(Qt::AutoColor)
                                                             : static_cast<Qt::ImageConversionFlags>(hb_parni(1))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QImage createHeuristicMask(bool clipTight = true) const
*/
HB_FUNC_STATIC(QIMAGE_CREATEHEURISTICMASK)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISLOGORNIL(1))
    {
#endif
      auto ptr = new QImage(obj->createHeuristicMask(OPBOOL(1, true)));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QImage createMaskFromColor(QRgb color, Qt::MaskMode mode = Qt::MaskInColor) const
*/
HB_FUNC_STATIC(QIMAGE_CREATEMASKFROMCOLOR)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && HB_ISNUM(1) && ISNUMORNIL(2))
    {
#endif
      auto ptr = new QImage(obj->createMaskFromColor(PQRGB(1), HB_ISNIL(2) ? static_cast<Qt::MaskMode>(Qt::MaskInColor)
                                                                           : static_cast<Qt::MaskMode>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int depth() const
*/
HB_FUNC_STATIC(QIMAGE_DEPTH)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->depth());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int dotsPerMeterX() const
*/
HB_FUNC_STATIC(QIMAGE_DOTSPERMETERX)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->dotsPerMeterX());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int dotsPerMeterY() const
*/
HB_FUNC_STATIC(QIMAGE_DOTSPERMETERY)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->dotsPerMeterY());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_FILL)
{
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    void fill(uint pixelValue)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->fill(PUINT(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    void fill(Qt::GlobalColor color)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->fill(static_cast<Qt::GlobalColor>(hb_parni(1)));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && (ISQCOLOR(1) || HB_ISCHAR(1)))
  {
    /*
    void fill(const QColor &color)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->fill(HB_ISOBJECT(1) ? *static_cast<QColor *>(Qt5xHb::itemGetPtr(1)) : QColor(hb_parc(1)));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QImage::Format format() const
*/
HB_FUNC_STATIC(QIMAGE_FORMAT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->format());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool hasAlphaChannel() const
*/
HB_FUNC_STATIC(QIMAGE_HASALPHACHANNEL)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->hasAlphaChannel());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int height() const
*/
HB_FUNC_STATIC(QIMAGE_HEIGHT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->height());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void invertPixels(QImage::InvertMode mode = QImage::InvertRgb)
*/
HB_FUNC_STATIC(QIMAGE_INVERTPIXELS)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISNUMORNIL(1))
    {
#endif
      obj->invertPixels(HB_ISNIL(1) ? static_cast<QImage::InvertMode>(QImage::InvertRgb)
                                    : static_cast<QImage::InvertMode>(hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool isGrayscale() const
*/
HB_FUNC_STATIC(QIMAGE_ISGRAYSCALE)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isGrayscale());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool isNull() const
*/
HB_FUNC_STATIC(QIMAGE_ISNULL)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isNull());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_LOAD)
{
  if (ISBETWEEN(1, 2) && HB_ISCHAR(1) && ISCHARORNIL(2))
  {
    /*
    bool load(const QString &fileName, const char * format = nullptr)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->load(PQSTRING(1), OPCONSTCHAR(2, nullptr)));
    }
  }
  else if (ISNUMPAR(2) && ISQIODEVICE(1) && HB_ISCHAR(2))
  {
    /*
    bool load(QIODevice * device, const char * format)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->load(PQIODEVICE(1), PCONSTCHAR(2)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_LOADFROMDATA)
{
  if (ISBETWEEN(2, 3) && HB_ISCHAR(1) && HB_ISNUM(2) && ISCHARORNIL(3))
  {
    /*
    bool loadFromData(const uchar * data, int len, const char * format = nullptr)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->loadFromData(PCONSTUCHAR(1), PINT(2), OPCONSTCHAR(3, nullptr)));
    }
  }
  else if (ISBETWEEN(1, 2) && ISQBYTEARRAY(1) && ISCHARORNIL(2))
  {
    /*
    bool loadFromData(const QByteArray &data, const char * format = nullptr)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->loadFromData(*PQBYTEARRAY(1), OPCONSTCHAR(2, nullptr)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QImage mirrored(bool horizontal = false, bool vertical = true) const
*/
HB_FUNC_STATIC(QIMAGE_MIRRORED)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 2) && ISLOGORNIL(1) && ISLOGORNIL(2))
    {
#endif
      auto ptr = new QImage(obj->mirrored(OPBOOL(1, false), OPBOOL(2, true)));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QPoint offset() const
*/
HB_FUNC_STATIC(QIMAGE_OFFSET)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto ptr = new QPoint(obj->offset());
      Qt5xHb::createReturnClass(ptr, "QPOINT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_PIXEL)
{
  if (ISNUMPAR(1) && ISQPOINT(1))
  {
    /*
    QRgb pixel(const QPoint &position) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RQRGB(obj->pixel(*PQPOINT(1)));
    }
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    QRgb pixel(int x, int y) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RQRGB(obj->pixel(PINT(1), PINT(2)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_PIXELINDEX)
{
  if (ISNUMPAR(1) && ISQPOINT(1))
  {
    /*
    int pixelIndex(const QPoint &position) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RINT(obj->pixelIndex(*PQPOINT(1)));
    }
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    int pixelIndex(int x, int y) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RINT(obj->pixelIndex(PINT(1), PINT(2)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QRect rect() const
*/
HB_FUNC_STATIC(QIMAGE_RECT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto ptr = new QRect(obj->rect());
      Qt5xHb::createReturnClass(ptr, "QRECT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QImage rgbSwapped() const
*/
HB_FUNC_STATIC(QIMAGE_RGBSWAPPED)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto ptr = new QImage(obj->rgbSwapped());
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_SAVE)
{
  if (ISBETWEEN(1, 3) && HB_ISCHAR(1) && ISCHARORNIL(2) && ISNUMORNIL(3))
  {
    /*
    bool save(const QString &fileName, const char * format = nullptr, int quality = -1) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->save(PQSTRING(1), OPCONSTCHAR(2, nullptr), OPINT(3, -1)));
    }
  }
  else if (ISBETWEEN(1, 3) && ISQIODEVICE(1) && ISCHARORNIL(2) && ISNUMORNIL(3))
  {
    /*
    bool save(QIODevice * device, const char * format = nullptr, int quality = -1) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->save(PQIODEVICE(1), OPCONSTCHAR(2, nullptr), OPINT(3, -1)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_SCALED)
{
  if (ISBETWEEN(1, 3) && ISQSIZE(1) && ISNUMORNIL(2) && ISNUMORNIL(3))
  {
    /*
    QImage scaled(const QSize &size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio,
    Qt::TransformationMode transformMode = Qt::FastTransformation) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(obj->scaled(*PQSIZE(1),
                                        HB_ISNIL(2) ? static_cast<Qt::AspectRatioMode>(Qt::IgnoreAspectRatio)
                                                    : static_cast<Qt::AspectRatioMode>(hb_parni(2)),
                                        HB_ISNIL(3) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                    : static_cast<Qt::TransformationMode>(hb_parni(3))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else if (ISBETWEEN(2, 4) && HB_ISNUM(1) && HB_ISNUM(2) && ISNUMORNIL(3) &&
           ISNUMORNIL(4))
  {
    /*
    QImage scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio,
    Qt::TransformationMode transformMode = Qt::FastTransformation) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(obj->scaled(PINT(1), PINT(2),
                                        HB_ISNIL(3) ? static_cast<Qt::AspectRatioMode>(Qt::IgnoreAspectRatio)
                                                    : static_cast<Qt::AspectRatioMode>(hb_parni(3)),
                                        HB_ISNIL(4) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                    : static_cast<Qt::TransformationMode>(hb_parni(4))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QImage scaledToHeight(int height, Qt::TransformationMode mode = Qt::FastTransformation) const
*/
HB_FUNC_STATIC(QIMAGE_SCALEDTOHEIGHT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && HB_ISNUM(1) && ISNUMORNIL(2))
    {
#endif
      auto ptr = new QImage(
          obj->scaledToHeight(PINT(1), HB_ISNIL(2) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                   : static_cast<Qt::TransformationMode>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QImage scaledToWidth(int width, Qt::TransformationMode mode = Qt::FastTransformation) const
*/
HB_FUNC_STATIC(QIMAGE_SCALEDTOWIDTH)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && HB_ISNUM(1) && ISNUMORNIL(2))
    {
#endif
      auto ptr = new QImage(
          obj->scaledToWidth(PINT(1), HB_ISNIL(2) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                  : static_cast<Qt::TransformationMode>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
uchar * scanLine(int i)
*/
/*
const uchar * scanLine(int i) const
*/

HB_FUNC_STATIC(QIMAGE_SCANLINE)
{
}

/*
void setColor(int index, QRgb colorValue)
*/
HB_FUNC_STATIC(QIMAGE_SETCOLOR)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
    {
#endif
      obj->setColor(PINT(1), PQRGB(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setColorCount(int colorCount)
*/
HB_FUNC_STATIC(QIMAGE_SETCOLORCOUNT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setColorCount(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setDotsPerMeterX(int x)
*/
HB_FUNC_STATIC(QIMAGE_SETDOTSPERMETERX)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setDotsPerMeterX(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setDotsPerMeterY(int y)
*/
HB_FUNC_STATIC(QIMAGE_SETDOTSPERMETERY)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setDotsPerMeterY(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setOffset(const QPoint &offset)
*/
HB_FUNC_STATIC(QIMAGE_SETOFFSET)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOINT(1))
    {
#endif
      obj->setOffset(*PQPOINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QIMAGE_SETPIXEL)
{
  if (ISNUMPAR(2) && ISQPOINT(1) && HB_ISNUM(2))
  {
    /*
    void setPixel(const QPoint &position, uint index_or_rgb)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->setPixel(*PQPOINT(1), PUINT(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3))
  {
    /*
    void setPixel(int x, int y, uint index_or_rgb)
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->setPixel(PINT(1), PINT(2), PUINT(3));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void setText(const QString &key, const QString &text)
*/
HB_FUNC_STATIC(QIMAGE_SETTEXT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISCHAR(1) && HB_ISCHAR(2))
    {
#endif
      obj->setText(PQSTRING(1), PQSTRING(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QSize size() const
*/
HB_FUNC_STATIC(QIMAGE_SIZE)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      auto ptr = new QSize(obj->size());
      Qt5xHb::createReturnClass(ptr, "QSIZE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void swap(QImage &other)
*/
HB_FUNC_STATIC(QIMAGE_SWAP)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQIMAGE(1))
    {
#endif
      obj->swap(*PQIMAGE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QString text(const QString &key = QString()) const
*/
HB_FUNC_STATIC(QIMAGE_TEXT)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISCHARORNIL(1))
    {
#endif
      RQSTRING(obj->text(OPQSTRING(1, QString())));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QStringList textKeys() const
*/
HB_FUNC_STATIC(QIMAGE_TEXTKEYS)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRINGLIST(obj->textKeys());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_TRANSFORMED)
{
  if (ISBETWEEN(1, 2) && ISQMATRIX(1) && ISNUMORNIL(2))
  {
    /*
    QImage transformed(const QMatrix &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(
          obj->transformed(*PQMATRIX(1), HB_ISNIL(2) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                     : static_cast<Qt::TransformationMode>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else if (ISBETWEEN(1, 2) && ISQTRANSFORM(1) && ISNUMORNIL(2))
  {
    /*
    QImage transformed(const QTransform &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QImage(
          obj->transformed(*PQTRANSFORM(1), HB_ISNIL(2) ? static_cast<Qt::TransformationMode>(Qt::FastTransformation)
                                                        : static_cast<Qt::TransformationMode>(hb_parni(2))));
      Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_VALID)
{
  if (ISNUMPAR(1) && ISQPOINT(1))
  {
    /*
    bool valid(const QPoint &pos) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->valid(*PQPOINT(1)));
    }
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    bool valid(int x, int y) const
    */
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      RBOOL(obj->valid(PINT(1), PINT(2)));
    }
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
int width() const
*/
HB_FUNC_STATIC(QIMAGE_WIDTH)
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->width());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QIMAGE_FROMDATA)
{
  if (ISBETWEEN(2, 3) && HB_ISCHAR(1) && HB_ISNUM(2) && ISCHARORNIL(3))
  {
    /*
    static QImage fromData(const uchar * data, int size, const char * format = nullptr)
    */

    auto ptr = new QImage(QImage::fromData(PCONSTUCHAR(1), PINT(2), OPCONSTCHAR(3, nullptr)));
    Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
  }
  else if (ISBETWEEN(1, 2) && ISQBYTEARRAY(1) && ISCHARORNIL(2))
  {
    /*
    static QImage fromData(const QByteArray &data, const char * format = nullptr)
    */

    auto ptr = new QImage(QImage::fromData(*PQBYTEARRAY(1), OPCONSTCHAR(2, nullptr)));
    Qt5xHb::createReturnClass(ptr, "QIMAGE", true);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_TRUEMATRIX)
{
  if (ISNUMPAR(3) && ISQMATRIX(1) && HB_ISNUM(2) && HB_ISNUM(3))
  {
    /*
    static QMatrix trueMatrix(const QMatrix &matrix, int width, int height)
    */

    auto ptr = new QMatrix(QImage::trueMatrix(*PQMATRIX(1), PINT(2), PINT(3)));
    Qt5xHb::createReturnClass(ptr, "QMATRIX", true);
  }
  else if (ISNUMPAR(3) && ISQTRANSFORM(1) && HB_ISNUM(2) && HB_ISNUM(3))
  {
    /*
    static QTransform trueMatrix(const QTransform &matrix, int width, int height)
    */

    auto ptr = new QTransform(QImage::trueMatrix(*PQTRANSFORM(1), PINT(2), PINT(3)));
    Qt5xHb::createReturnClass(ptr, "QTRANSFORM", true);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QIMAGE_PIXELCOLOR)
{
  if (ISNUMPAR(1) && ISQPOINT(1))
  {
    /*
    QColor pixelColor(const QPoint &position) const
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 6, 0))
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QColor(obj->pixelColor(*PQPOINT(1)));
      Qt5xHb::createReturnClass(ptr, "QCOLOR", true);
    }
#endif
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    QColor pixelColor(int x, int y) const
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 6, 0))
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      auto ptr = new QColor(obj->pixelColor(PINT(1), PINT(2)));
      Qt5xHb::createReturnClass(ptr, "QCOLOR", true);
    }
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
bool reinterpretAsFormat(QImage::Format format)
*/
HB_FUNC_STATIC(QIMAGE_REINTERPRETASFORMAT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 9, 0))
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->reinterpretAsFormat(static_cast<QImage::Format>(hb_parni(1))));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QIMAGE_SETPIXELCOLOR)
{
  if (ISNUMPAR(2) && ISQPOINT(1) && ISQCOLOR(2))
  {
    /*
    void setPixelColor(const QPoint &position, const QColor &color)
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 6, 0))
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->setPixelColor(*PQPOINT(1),
                         HB_ISOBJECT(2) ? *static_cast<QColor *>(Qt5xHb::itemGetPtr(2)) : QColor(hb_parc(2)));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && ISQCOLOR(3))
  {
    /*
    void setPixelColor(int x, int y, const QColor &color)
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 6, 0))
    auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

    if (obj != nullptr)
    {
      obj->setPixelColor(PINT(1), PINT(2),
                         HB_ISOBJECT(3) ? *static_cast<QColor *>(Qt5xHb::itemGetPtr(3)) : QColor(hb_parc(3)));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void convertTo(QImage::Format format, Qt::ImageConversionFlags flags = Qt::AutoColor)
*/
HB_FUNC_STATIC(QIMAGE_CONVERTTO)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 13, 0))
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && HB_ISNUM(1) && ISNUMORNIL(2))
    {
#endif
      obj->convertTo(static_cast<QImage::Format>(hb_parni(1)),
                     HB_ISNIL(2) ? static_cast<Qt::ImageConversionFlags>(Qt::AutoColor)
                                 : static_cast<Qt::ImageConversionFlags>(hb_parni(2)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QVariant toVariant()
*/
void QImage_toVariant1()
{
  auto obj = static_cast<QImage *>(Qt5xHb::itemGetPtrStackSelfItem());

  if (obj != nullptr)
  {
    QVariant *variant = new QVariant();
    variant->setValue<QImage>(*obj);
    Qt5xHb::createReturnClass(variant, "QVARIANT", true);
  }
}

/*
static QVariant toVariant(const QImage &)
*/
void QImage_toVariant2()
{
  QImage *image = (QImage *)hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0));
  QVariant *variant = new QVariant();
  variant->setValue<QImage>(*image);
  Qt5xHb::createReturnClass(variant, "QVARIANT", true);
}

//[1]QVariant toVariant()
//[2]static QVariant toVariant(const QImage &)

HB_FUNC_STATIC(QIMAGE_TOVARIANT)
{
  if (ISNUMPAR(0))
  {
    QImage_toVariant1();
  }
  else if (ISNUMPAR(1) && ISQIMAGE(1))
  {
    QImage_toVariant2();
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
static QImage fromVariant(const QVariant &)
*/
HB_FUNC_STATIC(QIMAGE_FROMVARIANT)
{
  if (ISNUMPAR(1) && ISQVARIANT(1))
  {
    QVariant *variant = (QVariant *)hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0));
    QImage *image = new QImage(variant->value<QImage>());
    Qt5xHb::createReturnClass(image, "QIMAGE", true);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

#pragma ENDDUMP
